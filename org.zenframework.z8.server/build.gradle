apply plugin: 'java'

configurations {
	boot
}

dependencies {
	boot project(':org.zenframework.z8.boot')

	compile project(':org.zenframework.z8.boot')

	compile ("org.zenframework.z8.dependencies:z8-dependencies-commons:${dependenciesVersion}@pom") { transitive = true }
	compile ("org.zenframework.z8.dependencies:z8-dependencies-libreoffice:${dependenciesVersion}@pom") { transitive = true }
	compile ("org.zenframework.z8.dependencies:z8-dependencies-birt:${dependenciesVersion}@pom") { transitive = true }

	testImplementation ("org.junit.jupiter:junit-jupiter-api:5.7.2")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.2")
}

eclipse.classpath.file.whenMerged {
	entries.findAll { entry ->
		entry instanceof org.gradle.plugins.ide.eclipse.model.Container
	}.each { entry ->
		entry.accessRules.add new org.gradle.plugins.ide.eclipse.model.AccessRule('0', 'sun/rmi/**')
	}
}

tasks.withType(JavaCompile) {
	doFirst {
		options.compilerArgs.add '-Xbootclasspath/p:' + configurations.boot.singleFile.toPath()
	}
}

publishing.publications {
	maven(MavenPublication) {
		from components.java
	}
}

test {
	useJUnitPlatform()
	systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
}
